#!groovy

import hudson.model.*;
import jenkins.model.*;
import com.cloudbees.plugins.credentials.SystemCredentialsProvider;
import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey;
import com.cloudbees.plugins.credentials.CredentialsScope;
import org.jenkinsci.plugins.plaincredentials.*
import org.jenkinsci.plugins.plaincredentials.impl.*
import org.apache.commons.fileupload.*


// Jenkins SSH Credentials
println "--> Registering SSH Credentials"
def system_credentials_provider = SystemCredentialsProvider.getInstance()

def ssh_key_description = "ADOP Jenkins Master"
def ssh_key_file_description = "ADOP Jenkins Master Private Key"
def ssh_key_scope = CredentialsScope.GLOBAL
def ssh_key_id = "adop-jenkins-master"
def ssh_key_file_id = "adop-jenkins-private"
def ssh_key_username = "jenkins"
def ssh_key_private_key_source = new BasicSSHUserPrivateKey.UsersPrivateKeySource()
def ssh_key_passphrase = null

file = new File('/var/jenkins_home/.ssh/id_rsa')
fileItem = [ getName: { return "id_rsa" },  get: { return file.getBytes() } ] as FileItem

// Add ssh key as private key type
ssh_credentials_exist = false
system_credentials_provider.getCredentials().each {
    credentials = (com.cloudbees.plugins.credentials.Credentials) it
    if ( credentials.getDescription() == ssh_key_description) {
        ssh_credentials_exist = true
        println("Found existing credentials: " + ssh_key_description)
    }
}

if(!ssh_credentials_exist) {

    def ssh_key_domain = com.cloudbees.plugins.credentials.domains.Domain.global()
    def ssh_key_creds = new BasicSSHUserPrivateKey(ssh_key_scope,ssh_key_id,ssh_key_username,ssh_key_private_key_source,ssh_key_passphrase,ssh_key_description)

    system_credentials_provider.addCredentials(ssh_key_domain,ssh_key_creds)
}

// Add ssh key as secret file type
ssh_credentials_file_exist = false
system_credentials_provider.getCredentials().each {
    credentials = (com.cloudbees.plugins.credentials.Credentials) it
    if ( credentials.getId() == ssh_key_file_id) {
        ssh_credentials_file_exist = true
        println("Found existing credentials: " + ssh_key_file_description)
    }
}

if(!ssh_credentials_file_exist) {

    def ssh_key_domain = com.cloudbees.plugins.credentials.domains.Domain.global()
    def ssh_key_file = new FileCredentialsImpl(ssh_key_scope, ssh_key_file_id, ssh_key_file_description, fileItem, null, null)

    system_credentials_provider.addCredentials(ssh_key_domain,ssh_key_file)
}
